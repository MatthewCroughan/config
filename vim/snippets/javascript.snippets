version 1
snippet ael
	addEventListener(\`${1:click}\`, ${2:function()}$3);

snippet a
	{
		$1
	};

snippet afunc
	async function ${1:name}($2) {
		$3
	}

snippet case
	case ${1:value}:
		$2; break;

snippet cl
	console.log(${1:\`test\`});$2

snippet do
	do {
		$2
	} while (${1:true});
#																								  
#  'document.createElement':
#	'prefix': 'dce'
#	'body': "document.createElement(`$1`);$2"
#																								  
#  'Double RAF':
#	'prefix': '2raf'
#	'body': """
#	requestAnimationFrame(()=>{requestAnimationFrame(()=>{
#		$2
#	})});${1:\n}
#	"""
#																								  
#  'else':
#	'prefix': 'else'
#	'body': """
#	else {
#		$1
#	}
#	"""
#																								  
#  'else if':
#	'prefix': 'else if'
#	'body': """
#	else if ($1) {
#		$2
#	}
#	"""
snippet fof
	for (let ${1:value} of ${2:iterable}) {
		$3
	}

#  'for':
#	'prefix': 'for'
#	'body': """
#	for (let ${1:var} = ${2:num}; ${1:var} ${3:<=} ${4:num}; ${5:${1:var}++}) {
#		$7
#	}${6:\n}
#	"""
#																								  
#  'for...in':
#	'prefix': 'fin'
#	'body': """
#	for (let ${1:index} in ${2:object}) {
#		$4
#	}${3:\n}
#	"""
#																								  
#  'for...of':
#	'prefix': 'fof'
#	'body': """
#	for (let ${1:value} of ${2:array}) {
#		$4
#	}${3:\n}
#	"""
#																								  
snippet func
	function ${1:name}($2) {
		$3
	}

#																								  
#  'getElementById':
#	'prefix': 'gebid'
#	'body': "getElementById(`$1`)${2:,}"
#																								  
#  'IIAFE':
#	'prefix': 'iiafe'
#	'body': """
#	(async()=>{
#		$2
#	})();${1:\n}
#	"""
#																								  
#  'IIFE':
#	'prefix': 'iife'
#	'body': """
#	(()=>{
#		$2
#	})();${1:\n}
#	"""
#																								  
#  'if':
#	'prefix': 'if'
#	'body': """
#	if ($1) {
#		$3
#	}${2:\n}
#	"""
#																								  
#  'import':
#	'prefix': 'imp'
#	'body': "import ${1:module} from './${2:modules/}$3.js';$4"
#																								  
#  'in-object brackets':
#	'prefix': 'o'
#	'body': """{
#		$1
#	},
#	"""
#																								  
#  'method':
#	'prefix': 'method'
#	'body': """
#	${1:name}($2) {
#		$3
#	},
#	"""
#																								  
#  'New Express':
#	'prefix': 'express'
#	'body': """
#	const
#		express = require(`express`),
#		path = require(`path`);
#																								  
#	express()
#		.set(`view engine`, `pug`)
#		.use(express.static(path.join(__dirname, `public`)))
#		.get(`/`, (req, res) => $1)
#		.listen(process.env.PORT || 80);
#	"""
#																								  
#  'Object.assign':
#	'prefix': 'oa'
#	'body': """
#	Object.assign(${1:obj}, {
#		$3
#	});${2:\n}
#	"""
#																								  
#  'Object.defineProperty':
#	'prefix': 'odp'
#	'body': "Object.defineProperty(${1:obj}, `${2:prop}`, {${3:value}: $4});$5"
#																								  
#  'Object.defineProperties':
#	'prefix': 'odps'
#	'body': """
#	Object.defineProperties(${1:obj}, {
#		$3
#	});${2:\n}
#	"""
#																								  
#  'promisify':
#	'prefix': 'promisify'
#	'body': """
#	return new Promise(resolve => {
#		$1
#	});
#	"""
#																								  
#  'querySelector':
#	'prefix': 'qs'
#	'body': "querySelector(`$1`)$2"
#																								  
#  'querySelectorAll':
#	'prefix': 'qsa'
#	'body': "querySelectorAll(`$1`)$2"
#																								  
#  'require':
#	'prefix': 'req'
#	'body': "${1:object name} = require(`${1:module name}`)${2:,}"
#																								  
#  'switch':
#	'prefix': 'switch'
#	'body': """
#	switch (${1:expr}) {
#		case ${2:value}:
#			$4; break;
#	}${3:\n}
#	"""
#																								  
#  'Template String Insert':
#	'prefix': 'tmp'
#	'body': '${$1}$2'
#																								  
#  'try':
#	'prefix': 'try'
#	'body': """
#	try {
#		$2
#	} catch${1: (error)} {
#																								  
#	}
#	"""
#																								  
#  'wait':
#	'prefix': 'wait'
#	'body': 'async function wait(ms) {return new Promise(resolve => setTimeout(resolve, ms));}'
#																								  
#  'while':
#	'prefix': 'while'
#	'body': """
#	while (${1:true}) {
#		$3
#	}${2:\n}
#	"""
